{"version":3,"sources":["assets/logo.svg","assets/background.svg","services/api.ts","pages/Repository/styles.ts","pages/Repository/index.tsx","pages/Dashboard/styles.ts","pages/Dashboard/index.tsx","routes/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["module","exports","api","axios","create","baseURL","Header","styled","header","RepositoryInfo","div","Commits","Repository","params","useRouteMatch","useState","repositoryData","setRepositoryData","commits","setCommits","useEffect","a","Promise","all","get","repository","repoinfo","commitsinfo","data","console","log","getRepositoryData","src","logoImg","alt","to","owner","avatar_url","full_name","description","stargazers_count","forks_count","open_issues_count","map","commit","key","sha","href","html_url","committer","login","message","size","Title","h1","Form","form","props","hasError","css","shade","Repositories","Error","span","Dashboard","input","setInput","storage","localStorage","getItem","JSON","parse","repositories","setRepositories","inputError","setInputError","handleAddRepositories","event","preventDefault","replace","response","setItem","stringify","onSubmit","value","onChange","e","target","placeholder","type","repo","id","Routes","path","exact","component","createGlobalStyle","bg","App","basename","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.448b0751.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.04f6798f.svg\";","module.exports = __webpack_public_path__ + \"static/media/background.0b819d63.svg\";","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.github.com',\n});\n\nexport default api;\n","import styled from 'styled-components';\n\nexport const Header = styled.header`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  a {\n    text-decoration: none;\n    display: flex;\n    align-items: center;\n    color: #a8a8b3;\n    transition: color 0.2s;\n    &:hover {\n      color: #666;\n    }\n  }\n\n  svg {\n    margin-right: 4px;\n  }\n`;\n\nexport const RepositoryInfo = styled.div`\n  margin-top: 80px;\n  header {\n    display: flex;\n    align-items: center;\n    img {\n      width: 120px;\n      height: 120px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin-left: 24px;\n\n      strong {\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n      p {\n        font-size: 18px;\n        color: #737380;\n      }\n    }\n  }\n\n  ul {\n    display: flex;\n    list-style: none;\n    margin-top: 40px;\n    li {\n      & + li {\n        margin-left: 80px;\n      }\n      strong {\n        display: block;\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n      span {\n        display: block;\n        margin-top: 4px;\n        color: #6c6c80;\n      }\n    }\n  }\n`;\n\nexport const Commits = styled.div`\n  margin-top: 80px;\n\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    display: block;\n    text-decoration: none;\n\n    display: flex;\n    align-items: center;\n    transition: transform 0.2s;\n    & + a {\n      margin-top: 16px;\n    }\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    img {\n      width: 64px;\n      height: 64px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin: 0 16px;\n      flex: 1%;\n\n      strong {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #a8a8b3;\n        margin-top: 4px;\n      }\n    }\n\n    svg {\n      color: #cbcbd6;\n      margin-left: auto;\n    }\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useRouteMatch, Link } from 'react-router-dom';\nimport { FiChevronRight, FiChevronLeft } from 'react-icons/fi';\nimport logoImg from '../../assets/logo.svg';\nimport api from '../../services/api';\n\nimport { Header, RepositoryInfo, Commits } from './styles';\n\ninterface RepositoryParams {\n  repository: string;\n}\n\ninterface Repository {\n  id: number;\n  full_name: string;\n  description: string;\n  url: string;\n  created_at: Date;\n  updated_at: Date;\n  forks_count: number;\n  open_issues_count: number;\n  stargazers_count: number;\n  owner: {\n    login: string;\n    avatar_url: string;\n    html_url: string;\n  };\n}\n\ninterface Commit {\n  sha: string;\n  html_url: string;\n  commit: {\n    message: string;\n    committer: {\n      date: Date;\n    };\n  };\n  committer: {\n    login: string;\n    avatar_url: string;\n    html_url: string;\n  };\n}\n\nconst Repository: React.FC = () => {\n  const { params } = useRouteMatch<RepositoryParams>();\n  const [repositoryData, setRepositoryData] = useState<Repository | null>(null);\n  const [commits, setCommits] = useState<Commit[]>([]);\n\n  useEffect(() => {\n    const getRepositoryData = async (): Promise<void> => {\n      try {\n        const [repoinfo, commitsinfo] = await Promise.all([\n          api.get(`/repos/${params.repository}`),\n          api.get(`/repos/${params.repository}/commits`),\n        ]);\n        setRepositoryData(repoinfo.data);\n        setCommits(commitsinfo.data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    getRepositoryData();\n  }, [params.repository]);\n  return (\n    <>\n      <Header>\n        <img src={logoImg} alt=\"Github Explorer\" />\n        <Link to=\"/\">\n          <FiChevronLeft />\n          Voltar\n        </Link>\n      </Header>\n      {repositoryData && (\n        <RepositoryInfo>\n          <header>\n            <img src={repositoryData.owner.avatar_url} alt=\"nome\" />\n            <div>\n              <strong>{repositoryData.full_name}</strong>\n              <p>{repositoryData.description}</p>\n            </div>\n          </header>\n          <ul>\n            <li>\n              <strong>{repositoryData.stargazers_count}</strong>\n              <span>Stars</span>\n            </li>\n            <li>\n              <strong>{repositoryData.forks_count}</strong>\n              <span>Forks</span>\n            </li>\n            <li>\n              <strong>{repositoryData.open_issues_count}</strong>\n              <span>issues</span>\n            </li>\n          </ul>\n        </RepositoryInfo>\n      )}\n      {commits && (\n        <Commits>\n          {commits.map(commit => (\n            <a key={commit.sha} href={commit.html_url}>\n              <img\n                src={commit.committer.avatar_url}\n                alt={commit.committer.login}\n              />\n              <div>\n                <strong>{commit.commit.message}</strong>\n                <p>{commit.committer.login}</p>\n              </div>\n              <FiChevronRight size={20} />\n            </a>\n          ))}\n        </Commits>\n      )}\n    </>\n  );\n};\n\nexport default Repository;\n","import styled, { css } from 'styled-components';\nimport { shade } from 'polished';\n\ninterface FormProps {\n  hasError: boolean;\n}\n\nexport const Title = styled.h1`\n  font-size: 48px;\n  color: #3a3a3a;\n  line-height: 56px;\n  max-width: 450px;\n  margin-top: 80px;\n`;\n\nexport const Form = styled.form<FormProps>`\n  margin-top: 40px;\n  max-width: 714px;\n  display: flex;\n  input {\n    flex: 1;\n    height: 70px;\n    padding: 0 24px;\n    border: 2px solid #fff;\n    border-radius: 5px 0 0 5px;\n    color: #3a3a3a;\n\n    ${props =>\n      props.hasError &&\n      css`\n        border-color: #c53030;\n        border-right: 0;\n      `}\n\n    & ::placeholder {\n      color: #a8a8b3;\n    }\n  }\n  button {\n    background: #04d361;\n    border: 0;\n    border-radius: 0 5px 5px 0;\n    height: 70px;\n    width: 210px;\n    color: #fff;\n    font-we<Error>{inputError}</Error>ight: bold;\n    transition: background-color 0.2s;\n\n    &:hover {\n      background: ${shade(0.2, '#04d361')};\n    }\n  }\n`;\n\nexport const Repositories = styled.div`\n  margin-top: 80px;\n  max-width: 700px;\n\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    display: block;\n    text-decoration: none;\n\n    display: flex;\n    align-items: center;\n    transition: transform 0.2s;\n    & + a {\n      margin-top: 16px;\n    }\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    img {\n      width: 64px;\n      height: 64px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin: 0 16px;\n      flex: 1%;\n\n      strong {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #a8a8b3;\n        margin-top: 4px;\n      }\n    }\n\n    svg {\n      color: #cbcbd6;\n      margin-left: auto;\n    }\n  }\n`;\n\nexport const Error = styled.span`\n  display: block;\n  color: #c53030;\n  margin-top: 8px;\n`;\n","import React, { useState, useEffect, FormEvent } from 'react';\nimport { FiChevronRight } from 'react-icons/fi';\nimport { Link } from 'react-router-dom';\nimport logoImg from '../../assets/logo.svg';\nimport api from '../../services/api';\nimport { Title, Form, Repositories, Error } from './styles';\n\ninterface Repository {\n  id: number;\n  full_name: string;\n  description: string;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\nconst Dashboard: React.FC = () => {\n  const [input, setInput] = useState('');\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\n    const storage = localStorage.getItem('@githubrepos:repositories');\n    if (storage) return JSON.parse(storage);\n    return [];\n  });\n  const [inputError, setInputError] = useState('');\n\n  const handleAddRepositories = async (\n    event: FormEvent<HTMLFormElement>,\n  ): Promise<void> => {\n    event.preventDefault();\n\n    if (!input) {\n      setInputError('Digite autor/nome do repositório');\n      return;\n    }\n    try {\n      const response = await api.get<Repository>(\n        `repos/${input.replace('-', '%2D')}`,\n      );\n      const repository = response.data;\n      setRepositories([...repositories, repository]);\n      setInput('');\n      setInputError('');\n    } catch (error) {\n      setInputError('Erro na busca por esse repositório');\n    }\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\n      '@githubrepos:repositories',\n      JSON.stringify(repositories),\n    );\n  }, [repositories]);\n  return (\n    <>\n      <img src={logoImg} alt=\"Github Explorer\" />\n      <Title>Explore repositórios no GitHub</Title>\n      <Form hasError={!!inputError} onSubmit={handleAddRepositories}>\n        <input\n          value={input}\n          onChange={e => setInput(e.target.value)}\n          placeholder=\"Digite o nome do repositório\"\n        />\n        <button type=\"submit\">Pesquisar</button>\n      </Form>\n      {inputError && <Error>{inputError}</Error>}\n      <Repositories>\n        {repositories.map(repo => (\n          <Link key={repo.id} to={`/repository/${repo.full_name}`}>\n            <img src={repo.owner.avatar_url} alt={repo.owner.login} />\n            <div>\n              <strong>{repo.full_name}</strong>\n              <p>{repo.description}</p>\n            </div>\n            <FiChevronRight size={20} />\n          </Link>\n        ))}\n      </Repositories>\n    </>\n  );\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Repository from '../pages/Repository';\nimport Dashboard from '../pages/Dashboard';\n\nconst Routes: React.FC = () => (\n  <Switch>\n    <Route path=\"/\" exact component={Dashboard} />\n    <Route path=\"/repository/:repository+\" component={Repository} />\n  </Switch>\n);\n\nexport default Routes;\n","import { createGlobalStyle } from 'styled-components';\n\nimport bg from '../assets/background.svg';\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    outline: 0;\n    box-sizing: border-box;\n  }\n\n  body {\n    background: #f0f0f5 url(${bg}) no-repeat 70% top;\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body, input, button {\n    font: 16px Roboto, sans-serif;\n  }\n\n  #root {\n    max-width: 960px;\n    margin: 0 auto;\n    padding: 40px 20px;\n  }\n\n  button {\n    cursor: pointer;\n  }\n`;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Routes from './routes';\nimport GlobalStyle from './styles/global';\n\nconst App: React.FC = () => (\n  <>\n    <BrowserRouter basename=\"gostack-gitrepos\">\n      <Routes />\n    </BrowserRouter>\n    <GlobalStyle />\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}